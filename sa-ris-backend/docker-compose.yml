# ===============================================
# South African RIS - Docker Compose Configuration
# Complete production-ready deployment stack
# ===============================================

version: '3.8'

services:
  # ===============================================
  # Database Services
  # ===============================================
  
  # Primary MySQL database for RIS data
  mysql_ris:
    image: mysql:8.0
    container_name: sa_ris_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: sa_ris_db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_ris_data:/var/lib/mysql
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./mysql_config/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
    networks:
      - sa_ris_network
    command: >
      --innodb-buffer-pool-size=2G
      --max-connections=500
      --query-cache-type=1
      --query-cache-size=256M
      --innodb-log-file-size=512M

  # Redis for caching and session management
  redis_cache:
    image: redis:7-alpine
    container_name: sa_ris_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sa_ris_network

  # ===============================================
  # DICOM Services
  # ===============================================
  
  # Orthanc DICOM server
  orthanc:
    image: orthancteam/orthanc:latest
    container_name: sa_ris_orthanc
    restart: unless-stopped
    ports:
      - "4242:4242"  # DICOM port
      - "8042:8042"  # HTTP port
    volumes:
      - orthanc_data:/var/lib/orthanc/db
      - orthanc_storage:/var/lib/orthanc/storage
      - ./orthanc_config:/etc/orthanc:ro
    environment:
      - ORTHANC_NAME=SA_RIS_ORTHANC
      - DICOM_WEB_ENABLED=true
      - VERBOSE_ENABLED=true
    networks:
      - sa_ris_network
    depends_on:
      - mysql_ris

  # ===============================================
  # Backend Services
  # ===============================================
  
  # PHP-FPM backend application
  php_backend:
    build:
      context: .
      dockerfile: Dockerfile.php
    container_name: sa_ris_backend
    restart: unless-stopped
    volumes:
      - ./backend:/var/www/html
      - ./logs:/var/log/sa-ris
      - orthanc_storage:/var/orthanc/storage:ro
    environment:
      - DB_HOST=mysql_ris
      - DB_NAME=sa_ris_db
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=redis_cache
      - ORTHANC_URL=http://orthanc:8042
      - SA_RIS_ENV=production
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - sa_ris_network
    depends_on:
      - mysql_ris
      - redis_cache
      - orthanc

  # Nginx web server
  nginx:
    image: nginx:1.24-alpine
    container_name: sa_ris_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx_config:/etc/nginx/conf.d
      - ./frontend/dist:/var/www/html/frontend
      - ./ssl_certificates:/etc/nginx/ssl
      - ./logs:/var/log/nginx
    networks:
      - sa_ris_network
    depends_on:
      - php_backend

  # ===============================================
  # AI and Processing Services
  # ===============================================
  
  # Python AI processing service
  ai_processor:
    build:
      context: .
      dockerfile: Dockerfile.ai
    container_name: sa_ris_ai
    restart: unless-stopped
    volumes:
      - ./ai_models:/app/models
      - orthanc_storage:/var/orthanc/storage:ro
      - ./logs:/var/log/sa-ris
    environment:
      - ORTHANC_URL=http://orthanc:8042
      - DB_HOST=mysql_ris
      - DB_NAME=sa_ris_db
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=redis_cache
      - AI_MODEL_PATH=/app/models
    networks:
      - sa_ris_network
    depends_on:
      - mysql_ris
      - orthanc
      - redis_cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # ===============================================
  # Monitoring and Analytics
  # ===============================================
  
  # ElasticSearch for logging and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sa_ris_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sa_ris_network

  # Kibana for visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sa_ris_kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - sa_ris_network
    depends_on:
      - elasticsearch

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sa_ris_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sa_ris_network

  # Grafana for dashboard visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sa_ris_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - sa_ris_network
    depends_on:
      - prometheus
      - elasticsearch

  # ===============================================
  # Backup and Maintenance
  # ===============================================
  
  # Database backup service
  backup_service:
    image: mysql:8.0
    container_name: sa_ris_backup
    restart: "no"
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    environment:
      - MYSQL_HOST=mysql_ris
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=sa_ris_db
    networks:
      - sa_ris_network
    depends_on:
      - mysql_ris
    entrypoint: ["/scripts/backup_script.sh"]

  # File system backup for DICOM data
  dicom_backup:
    image: alpine:latest
    container_name: sa_ris_dicom_backup
    restart: "no"
    volumes:
      - orthanc_storage:/source:ro
      - ./dicom_backups:/backup
      - ./scripts:/scripts
    entrypoint: ["/scripts/dicom_backup_script.sh"]

# ===============================================
# Network Configuration
# ===============================================

networks:
  sa_ris_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===============================================
# Volume Configuration
# ===============================================

volumes:
  mysql_ris_data:
    driver: local
  redis_data:
    driver: local
  orthanc_data:
    driver: local
  orthanc_storage:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===============================================
# Health Checks and Service Dependencies
# ===============================================

# Health check configurations are embedded in service definitions above
# Dependencies ensure proper startup order for critical services
